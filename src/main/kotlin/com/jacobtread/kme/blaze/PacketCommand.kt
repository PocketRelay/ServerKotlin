package com.jacobtread.kme.blaze

@Suppress("unused")
enum class PacketCommand(val id: Int) {
    //Authentication Component
    UPDATE_ACCOUNT(0x14),
    UPDATE_PARENTAL_EMAIL(0x1C),
    LIST_USER_ENTITLEMENTS_2(0x1D),
    GET_ACCOUNT(0x1E),
    GRANT_ENTITLEMENT(0x1F),
    LIST_ENTITLEMENTS(0x20),
    HAS_ENTITLEMENT(0x21),
    GET_USE_COUNT(0x22),
    DECREMENT_USE_COUNT(0x23),
    GET_AUTH_TOKEN(0x24),
    GET_HANDOFF_TOKEN(0x25),
    GET_PASSWORD_RULES(0x26),
    GRANT_ENTITLEMENT_2(0x27),
    LOGIN(0x28),
    ACCEPT_TOS(0x29),
    GET_TOS_INFO(0x2A),
    MODIFY_ENTITLEMENT_2(0x2B),
    CONSUME_CODE(0x2C),
    PASSWORD_FORGOT(0x2D),
    GET_TOS_CONTENT(0x2E),
    GET_PRIVACY_POLICY_CONTENT(0x2F),
    LIST_PERSONA_ENTITLEMENTS_2(0x30),
    SILENT_LOGIN(0x32),
    CHECK_AGE_REQUIREMENT(0x33),
    GET_OPT_IN(0x34),
    ENABLE_OPT_IN(0x35),
    DISABLE_OPT_IN(0x36),
    EXPRESS_LOGIN(0x3C),
    LOGOUT(0x46),
    CREATE_PERSONA(0x50),
    GET_PERSONA(0x5A),
    LIST_PERSONAS(0x64),
    LOGIN_PERSONA(0x6E),
    LOGOUT_PERSONA(0x78),
    DELETE_PERSONA(0x8C),
    DISABLE_PERSONA(0x8D),
    LIST_DEVICE_ACCOUNTS(0x8F),
    XBOX_CREATE_ACCOUNT(0x96),
    ORIGIN_LOGIN(0x98),
    XBOX_ASSOCIATE_ACCOUNT(0xA0),
    XBOX_LOGIN(0xAA),
    PS3_CREATE_ACCOUNT(0xB4),
    PS3_ASSOCIATE_ACCOUNT(0xBE),
    PS3_LOGIN(0xC8),
    VALIDATE_SESSION_KEY(0xD2),
    CREATE_WAL_USER_SESSION(0xE6),
    ACCEPT_LEGAL_DOCS(0xF1),
    GET_LEGAL_DOCS_INFO(0xF2),
    GET_TERMS_OF_SERVICE_CONTENT(0xF6),
    DEVICE_LOGIN_GUEST(0x12C),

    // Game Manager Component
    CREATE_GAME(0x1),
    DESTROY_GAME(0x2),
    ADVANCE_GAME_STATE(0x3),
    SET_GAME_SETTINGS(0x4),
    SET_PLAYER_CAPACITY(0x5),
    SET_PRESENCE_MODE(0x6),
    SET_GAME_ATTRIBUTES(0x7),
    SET_PLAYER_ATTRIBUTES(0x8),
    JOIN_GAME(0x9),
    REMOVE_PLAYER(0xB),
    START_MATCHMAKING(0xD),
    CANCEL_MATCHMAKING(0xE),
    FINALIZE_GAME_CREATION(0xF),
    LIST_GAMES(0x11),
    SET_PLAYER_CUSTOM_DATA(0x12),
    REPLAY_GAME(0x13),
    RETURN_DEDICATED_SERVER_TO_POOL(0x14),
    JOIN_GAME_BY_GROUP(0x15),
    LEAVE_GAME_BY_GROUP(0x16),
    MIGRATE_GAME(0x17),
    UPDATE_GAME_HOST_MIGRATION_STATUS(0x18),
    RESET_DEDICATED_SERVER(0x19),
    UPDATE_GAME_SESSION(0x1A),
    BAN_PLAYER(0x1B),
    UPDATE_MESH_CONNECTION(0x1D),
    REMOVE_PLAYER_FROM_BANNED_LIST(0x1F),
    CLEAR_BANNED_LIST(0x20),
    GET_BANNED_LIST(0x21),
    ADD_QUEUED_PLAYER_TO_GAME(0x26),
    UPDATE_GAME_NAME(0x27),
    EJECT_HOST(0x28),
    NOTIFY_GAME_UPDATED(0x50),
    GET_GAME_LIST_SNAPSHOT(0x64),
    GET_GAME_LIST_SUBSCRIPTION(0x65),
    DESTROY_GAME_LIST(0x66),
    GET_FULL_GAME_DATA(0x67),
    GET_MATCH_MAKING_CONFIG(0x68),
    GET_GAME_DATA_FROM_ID(0x69),
    ADD_ADMIN_PLAYER(0x6A),
    REMOVE_ADMIN_PLAYER(0x6B),
    SET_PLAYER_TEAM(0x6C),
    CHANGE_GAME_TEAM_ID(0x6D),
    MIGRATE_ADMIN_PLAYER(0x6E),
    GET_USER_SET_GAME_LIST_SUBSCRIPTION(0x6F),
    SWAP_PLAYERS_TEAM(0x70),
    REGISTER_DYNAMIC_DEDICATED_SERVER_CREATOR(0x96),
    UNREGISTER_DYNAMIC_DEDICATED_SERVER_CREATOR(0x97),

    // Redirector Component
    GET_SERVER_INSTANCE(0x1),

    // Stats Component
    GET_STAT_DESCS(0x1),
    GET_STATS(0x2),
    GET_STAT_GROUP_LIST(0x3),
    GET_STAT_GROUP(0x4),
    GET_STATS_BY_GROUP(0x5),
    GET_DATE_RANGE(0x6),
    GET_ENTITY_COUNT(0x7),
    GET_LEADERBOARD_GROUP(0xA),
    GET_LEADERBOARD_FOLDER_GROUP(0xB),
    GET_LEADERBOARD(0xC),
    GET_CENTERED_LEADERBOARD(0xD),
    GET_FILTERED_LEADERBOARD(0xE),
    GET_KEY_SCOPES_MAP(0xF),
    GET_STATS_BY_GROUP_ASYNC(0x10),
    GET_LEADERBOARD_TREE_ASYNC(0x11),
    GET_LEADERBOARD_ENTITY_COUNT(0x12),
    GET_STAT_CATEGORY_LIST(0x13),
    GET_PERIOD_IDS(0x14),
    GET_LEADERBOAR_DRAW(0x15),
    GET_CENTERED_LEADERBOARD_RAW(0x16),
    GET_FILTERED_LEADERBOARD_RAW(0x17),
    CHANGE_KEY_SCOPE_VALUE(0x18),

    // Util Component
    FETCH_CLIENT_CONFIG(0x1),
    PING(0x2),
    SET_CLIENT_DATA(0x3),
    LOCALIZE_STRINGS(0x4),
    GET_TELEMETRY_SERVER(0x5),
    GET_TICKER_SERVER(0x6),
    PRE_AUTH(0x7),
    POST_AUTH(0x8),
    USER_SETTINGS_LOAD(0xA),
    USER_SETTINGS_SAVE(0xB),
    USER_SETTINGS_LOAD_ALL(0xC),
    DELETE_USER_SETTINGS(0xE),
    FILTER_FOR_PROFANITY(0x14),
    FETCH_QOS_CONFIG(0x15),
    SET_CLIENT_METRICS(0x16),
    SET_CONNECTION_STATE(0x17),
    GET_PSS_CONFIG(0x18),
    GET_USER_OPTIONS(0x19),
    SET_USER_OPTIONS(0x1A),
    SUSPEND_USER_PING(0x1B),

    // Messaging Component
    SEND_MESSAGE(0x1),
    FETCH_MESSAGES(0x2),
    PURGE_MESSAGES(0x3),
    TOUCH_MESSAGES(0x4),
    GET_MESSAGES(0x5),

    // Association Lists Component
    ADD_USERS_TO_LIST(0x1),
    REMOVE_USERS_FROM_LIST(0x1),
    CLEAR_LISTS(0x3),
    SET_USERS_TO_LIST(0x4),
    GET_LIST_FOR_USER(0x5),
    GET_LISTS(0x6),
    SUBSCRIBE_TO_LISTS(0x7),
    UNSUBSCRIBE_FROM_LISTS(0x8),
    GET_CONFIG_LISTS_INFO(0x9),

    // Game Reporting Component
    SUBMIT_GAME_REPORT(0x1),
    SUBMIT_OFFLINE_GAME_REPORT(0x2),
    SUBMIT_GAME_EVENTS(0x3),
    GET_GAME_REPORT_QUERY(0x4),
    GET_GAME_REPORT_QUERIES_LIST(0x5),
    GET_GAME_REPORTS(0x6),
    GET_GAME_REPORT_VIEW(0x7),
    GET_GAME_REPORT_VIEW_INFO(0x8),
    GET_GAME_REPORT_VIEW_INFO_LIST(0x9),
    GET_GAME_REPORT_TYPES(0xA),
    UPDATE_METRIC(0xB),
    GET_GAME_REPORT_COLUMN_INFO(0xC),
    GET_GAME_REPORT_COLUMN_VALUES(0xD),
    SUBMIT_TRUSTED_MID_GAME_REPORT(0x64),
    SUBMIT_TRUSTED_END_GAME_REPORT(0x65),

    // User Sessions Component
    FETCH_EXTENDED_DATA(0x3),
    UPDATE_EXTENDED_DATA_ATTRIBUTE(0x5),
    UPDATE_HARDWARE_FLAGS(0x8),
    LOOKUP_USER(0xC),
    LOOKUP_USERS(0xD),
    LOOKUP_USERS_BY_PREFIX(0xE),
    UPDATE_NETWORK_INFO(0x14),
    LOOKUP_USER_GEO_IP_DATA(0x17),
    OVERRIDE_USER_GEO_IP_DATA(0x18),
    UPDATE_USER_SESSION_CLIENT_DATA(0x19),
    SET_USER_INFO_ATTRIBUTE(0x1A),
    RESET_USER_GEO_IP_DATA(0x1B),
    LOOKUP_USER_SESSION_ID(0x20),
    FETCH_LAST_LOCALE_USED_AND_AUTH_ERROR(0x21),
    FETCH_USER_FIRST_LAST_AUTH_TIME(0x22),
    RESUME_SESSION(0x23),
    UNKNOWN(-1);


    companion object {
        private val LOOKUP: HashMap<Int, PacketCommand>

        init {
            val values = values()
            LOOKUP = HashMap(values.size)
            values.forEach { LOOKUP[it.id] = it }
        }

        fun from(value: Int): PacketCommand = LOOKUP[value] ?: UNKNOWN
    }
}