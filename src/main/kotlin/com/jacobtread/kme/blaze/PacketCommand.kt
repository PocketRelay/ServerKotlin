
package com.jacobtread.kme.blaze

@Suppress("unused")
enum class PacketCommand(val id: Int) {
    //Authentication Component
    UPDATE_ACCOUNT(0x00010014),
    UPDATE_PARENTAL_EMAIL(0x0001001C),
    LIST_USER_ENTITLEMENTS_2(0x0001001D),
    GET_ACCOUNT(0x0001001E),
    GRANT_ENTITLEMENT(0x0001001F),
    LIST_ENTITLEMENTS(0x00010020),
    HAS_ENTITLEMENT(0x00010021),
    GET_USE_COUNT(0x00010022),
    DECREMENT_USE_COUNT(0x00010023),
    GET_AUTH_TOKEN(0x00010024),
    GET_HANDOFF_TOKEN(0x00010025),
    GET_PASSWORD_RULES(0x00010026),
    GRANT_ENTITLEMENT_2(0x00010027),
    LOGIN(0x00010028),
    ACCEPT_TOS(0x00010029),
    GET_TOS_INFO(0x0001002A),
    MODIFY_ENTITLEMENT_2(0x0001002B),
    CONSUME_CODE(0x0001002C),
    PASSWORD_FORGOT(0x0001002D),
    GET_TOS_CONTENT(0x0001002E),
    GET_PRIVACY_POLICY_CONTENT(0x0001002F),
    LIST_PERSONA_ENTITLEMENTS_2(0x00010030),
    SILENT_LOGIN(0x00010032),
    CHECK_AGE_REQUIREMENT(0x00010033),
    GET_OPT_IN(0x00010034),
    ENABLE_OPT_IN(0x00010035),
    DISABLE_OPT_IN(0x00010036),
    EXPRESS_LOGIN(0x0001003C),
    LOGOUT(0x00010046),
    CREATE_PERSONA(0x00010050),
    GET_PERSONA(0x0001005A),
    LIST_PERSONAS(0x00010064),
    LOGIN_PERSONA(0x0001006E),
    LOGOUT_PERSONA(0x00010078),
    DELETE_PERSONA(0x0001008C),
    DISABLE_PERSONA(0x0001008D),
    LIST_DEVICE_ACCOUNTS(0x0001008F),
    XBOX_CREATE_ACCOUNT(0x00010096),
    ORIGIN_LOGIN(0x00010098),
    XBOX_ASSOCIATE_ACCOUNT(0x000100A0),
    XBOX_LOGIN(0x000100AA),
    PS3_CREATE_ACCOUNT(0x000100B4),
    PS3_ASSOCIATE_ACCOUNT(0x000100BE),
    PS3_LOGIN(0x000100C8),
    VALIDATE_SESSION_KEY(0x000100D2),
    CREATE_WAL_USER_SESSION(0x000100E6),
    ACCEPT_LEGAL_DOCS(0x000100F1),
    GET_LEGAL_DOCS_INFO(0x000100F2),
    GET_TERMS_OF_SERVICE_CONTENT(0x000100F6),
    DEVICE_LOGIN_GUEST(0x0001012C),
    // Game Manager Component
    CREATE_GAME(0x00040001),
    DESTROY_GAME(0x00040002),
    ADVANCE_GAME_STATE(0X00040003),
    SET_GAME_SETTINGS(0X00040004),
    SET_PLAYER_CAPACITY(0X00040005),
    SET_PRESENCE_MODE(0X00040006),
    SET_GAME_ATTRIBUTES(0X00040007),
    SET_PLAYER_ATTRIBUTES(0X00040008),
    JOIN_GAME(0X00040009),
    REMOVE_PLAYER(0X0004000B),
    START_MATCHMAKING(0X0004000D),
    CANCEL_MATCHMAKING(0X0004000E),
    FINALIZE_GAME_CREATION(0X0004000F),
    LIST_GAMES(0X00040011),
    SET_PLAYER_CUSTOM_DATA(0X00040012),
    REPLAY_GAME(0X00040013),
    RETURN_DEDICATED_SERVER_TO_POOL(0X00040014),
    JOIN_GAME_BY_GROUP(0X00040015),
    LEAVE_GAME_BY_GROUP(0X00040016),
    MIGRATE_GAME(0X00040017),
    UPDATE_GAME_HOST_MIGRATION_STATUS(0X00040018),
    RESET_DEDICATED_SERVER(0X00040019),
    UPDATE_GAME_SESSION(0X0004001A),
    BAN_PLAYER(0X0004001B),
    UPDATE_MESH_CONNECTION(0X0004001D),
    REMOVE_PLAYER_FROM_BANNED_LIST(0X0004001F),
    CLEAR_BANNED_LIST(0X00040020),
    GET_BANNED_LIST(0X00040021),
    ADD_QUEUED_PLAYER_TO_GAME(0X00040026),
    UPDATE_GAME_NAME(0X00040027),
    EJECT_HOST(0X00040028),
    NOTIFY_GAME_UPDATED(0X00040050),
    GET_GAME_LIST_SNAPSHOT(0X00040064),
    GET_GAME_LIST_SUBSCRIPTION(0X00040065),
    DESTROY_GAME_LIST(0X00040066),
    GET_FULL_GAME_DATA(0X00040067),
    GET_MATCH_MAKING_CONFIG(0X00040068),
    GET_GAME_DATA_FROM_ID(0X00040069),
    ADD_ADMIN_PLAYER(0X0004006A),
    REMOVE_ADMIN_PLAYER(0X0004006B),
    SET_PLAYER_TEAM(0X0004006C),
    CHANGE_GAME_TEAM_ID(0X0004006D),
    MIGRATE_ADMIN_PLAYER(0X0004006E),
    GET_USER_SET_GAME_LIST_SUBSCRIPTION(0X0004006F),
    SWAP_PLAYERS_TEAM(0X00040070),
    REGISTER_DYNAMIC_DEDICATED_SERVER_CREATOR(0X00040096),
    UNREGISTER_DYNAMIC_DEDICATED_SERVER_CREATOR(0X00040097),
    // Redirector Component
    GET_SERVER_INSTANCE(0X00050001),
    REQUEST_REDIRECT(0X00000001),
    // Stats Component
    GET_STAT_DESCS(0X00070001),
    GET_STATS(0X00070002),
    GET_STAT_GROUP_LIST(0X00070003),
    GET_STAT_GROUP(0X00070004),
    GET_STATS_BY_GROUP(0X00070005),
    GET_DATE_RANGE(0X00070006),
    GET_ENTITY_COUNT(0X00070007),
    GET_LEADERBOARD_GROUP(0X0007000A),
    GET_LEADERBOARD_FOLDER_GROUP(0X0007000B),
    GET_LEADERBOARD(0X0007000C),
    GET_CENTERED_LEADERBOARD(0X0007000D),
    GET_FILTERED_LEADERBOARD(0X0007000E),
    GET_KEY_SCOPES_MAP(0X0007000F),
    GET_STATS_BY_GROUP_ASYNC(0X00070010),
    GET_LEADERBOARD_TREE_ASYNC(0X00070011),
    GET_LEADERBOARD_ENTITY_COUNT(0X00070012),
    GET_STAT_CATEGORY_LIST(0X00070013),
    GET_PERIOD_IDS(0X00070014),
    GET_LEADERBOAR_DRAW(0X00070015),
    GET_CENTERED_LEADERBOARD_RAW(0X00070016),
    GET_FILTERED_LEADERBOARD_RAW(0X00070017),
    CHANGE_KEY_SCOPE_VALUE(0X00070018),
    // Util Component
    FETCH_CLIENT_CONFIG(0X00090001),
    PING(0X00090002),
    SET_CLIENT_DATA(0X00090003),
    LOCALIZE_STRINGS(0X00090004),
    GET_TELEMETRY_SERVER(0X00090005),
    GET_TICKER_SERVER(0X00090006),
    PRE_AUTH(0X00090007),
    POST_AUTH(0X00090008),
    USER_SETTINGS_LOAD(0X0009000A),
    USER_SETTINGS_SAVE(0X0009000B),
    USER_SETTINGS_LOAD_ALL(0X0009000C),
    DELETE_USER_SETTINGS(0X0009000E),
    FILTER_FOR_PROFANITY(0X00090014),
    FETCH_QOS_CONFIG(0X00090015),
    SET_CLIENT_METRICS(0X00090016),
    SET_CONNECTION_STATE(0X00090017),
    GET_PSS_CONFIG(0X00090018),
    GET_USER_OPTIONS(0X00090019),
    SET_USER_OPTIONS(0X0009001A),
    SUSPEND_USER_PING(0X0009001B),
    // Messaging Component
    SEND_MESSAGE(0X000F0001),
    FETCH_MESSAGES(0X000F0002),
    PURGE_MESSAGES(0X000F0003),
    TOUCH_MESSAGES(0X000F0004),
    GET_MESSAGES(0X000F0005),
    // Association Lists Component
    ADD_USERS_TO_LIST(0X00190001),
    REMOVE_USERS_FROM_LIST(0X00190002),
    CLEAR_LISTS(0X00190003),
    SET_USERS_TO_LIST(0X00190004),
    GET_LIST_FOR_USER(0X00190005),
    GET_LISTS(0X00190006),
    SUBSCRIBE_TO_LISTS(0X00190007),
    UNSUBSCRIBE_FROM_LISTS(0X00190008),
    GET_CONFIG_LISTS_INFO(0X00190009),
    // Game Reporting Component
    SUBMIT_GAME_REPORT(0X001C0001),
    SUBMIT_OFFLINE_GAME_REPORT(0X001C0002),
    SUBMIT_GAME_EVENTS(0X001C0003),
    GET_GAME_REPORT_QUERY(0X001C0004),
    GET_GAME_REPORT_QUERIES_LIST(0X001C0005),
    GET_GAME_REPORTS(0X001C0006),
    GET_GAME_REPORT_VIEW(0X001C0007),
    GET_GAME_REPORT_VIEW_INFO(0X001C0008),
    GET_GAME_REPORT_VIEW_INFO_LIST(0X001C0009),
    GET_GAME_REPORT_TYPES(0X001C000A),
    UPDATE_METRIC(0X001C000B),
    GET_GAME_REPORT_COLUMN_INFO(0X001C000C),
    GET_GAME_REPORT_COLUMN_VALUES(0X001C000D),
    SUBMIT_TRUSTED_MID_GAME_REPORT(0X001C0064),
    SUBMIT_TRUSTED_END_GAME_REPORT(0X001C0065),
    // User Sessions Component
    FETCH_EXTENDED_DATA(0X78020003),
    UPDATE_EXTENDED_DATA_ATTRIBUTE(0X78020005),
    UPDATE_HARDWARE_FLAGS(0X78020008),
    LOOKUP_USER(0X7802000C),
    LOOKUP_USERS(0X7802000D),
    LOOKUP_USERS_BY_PREFIX(0X7802000E),
    UPDATE_NETWORK_INFO(0X78020014),
    LOOKUP_USER_GEO_IP_DATA(0X78020017),
    OVERRIDE_USER_GEO_IP_DATA(0X78020018),
    UPDATE_USER_SESSION_CLIENT_DATA(0X78020019),
    SET_USER_INFO_ATTRIBUTE(0X7802001A),
    RESET_USER_GEO_IP_DATA(0X7802001B),
    LOOKUP_USER_SESSION_ID(0X78020020),
    FETCH_LAST_LOCALE_USED_AND_AUTH_ERROR(0X78020021),
    FETCH_USER_FIRST_LAST_AUTH_TIME(0X78020022),
    RESUME_SESSION(0X78020023),
    UNKNOWN(-1);


    companion object {
        private val LOOKUP: HashMap<Int, PacketCommand>
        init {
            val values = values()
            LOOKUP = HashMap(values.size)
            values.forEach { LOOKUP[it.id] = it }
        }

        fun from(value: Int): PacketCommand = LOOKUP[value] ?: UNKNOWN
    }
}